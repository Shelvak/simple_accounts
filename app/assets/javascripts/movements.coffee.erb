window.Movements ||= {}

Movements.currentMovementKind = null
Movements.currentClient = null
# Movements.lastClientsSearch = {}

Movements.showSwalError = (msg) ->
  swal(
    title: 'Error'
    text: msg || 'Oops hubo un problema...'
    type: 'error'
    showConfirmButton: true
    allowOutsideClick: true
    allowEscapeKey: true
  )

# Movements.chooseClient = (clients) ->
#   options = {}
#   for client in clients
#     Movements.lastClientsSearch[client.id] = client
#     options[client.id] = "#{client.label} - #{client.identifier}"
#
#   swal(
#     title: 'Multiples clientes coinciden'
#     input: 'select'
#     inputOptions: options
#   ).then((result) ->
#     if result && result.value
#       Movements.askForAmount( Movements.lastClientsSearch[result.value] )
#   )

# Movements.processClientResult = (result) ->
#   if result.value == undefined
#     return
#
#   if result.value.length == 1
#     Movements.askForAmount(result.value[0])
#
#   else if result.value.length > 1
#     Movements.chooseClient(result.value)
#
#   else
#     Movements.showSwalError('No se encontraron clientes')

Movements.askForAmount = (client) ->
  Movements.currentClient = client

  swal(
    title: "<h3>#{client.label} <small>(#{client.identifier})</small></h3>"
    html: "<h5>Tiene $#{parseFloat(client.amount).toFixed(2)} <br /> <span class='future-amount'></span><h5>"
    input: 'number'
    inputAttributes: {
      min: '0'
      step: '.01'
    }
    inputValidator: (value) ->
      if parseFloat(value) <= 0
        'Ingrese un valor mayor a 0.0'
    confirmButtonText: if Movements.currentMovementKind == 'credit' then 'Cargar' else 'Debitar'
    inputClass: 'movement-amount-field'
    allowEscapeKey: true
    allowOutsideClick: true
  ).then(
    (result) ->
      if result && result.value
        Movements.createMovementForClient(client, result.value)
  )

Movements.createMovementForClient = (client, amount) ->
  $.ajax(
    url: '/movements',
    type: 'POST'
    data: {
      movement: {
        client_id: client.id,
        amount: amount,
        kind: Movements.currentMovementKind
      }
    }
    dataType: 'JSON'
    success: ->
      swal(
        title: 'Exito'
        text: 'El movimiento se cargo correctamente'
        timer: 1000
        type: 'success'
        showConfirmButton: true
        allowOutsideClick: true
        allowEscapeKey: true
        onClose: -> location.reload()
      )
    error: Movements.showSwalError
  )

# Movements.searchClient = (query) ->
#   if query.length == 0
#     return []
#
#   $.get(
#     url: '/clients'
#     data: { q: query }
#     dataType: 'json'
#     success: (response) ->
#       response
#     error: Movements.showSwalError
#   )

$(document).on 'click', '[data-add-movement-to-client]', (e) ->
  e.preventDefault()
  e.stopPropagation()

  link = $(e.currentTarget)

  Movements.currentMovementKind = link.data('add-movement-to-client')

  Movements.askForAmount(link.data('client'))

  # swal(
  #   width: '500px'
  #   html: '<h3>Pase la tarjeta<br />Escriba una identificaci√≥n o nombre</h3>'
  #   input: 'text'
  #   inputAttributes: {
  #     autocapitalize: 'off'
  #   }
  #   showCancelButton: false
  #   showCloseButton: true
  #   confirmButtonText: 'Buscar'
  #   showLoaderOnConfirm: true
  #   preConfirm: Movements.searchClient
  #   allowEscapeKey: -> !swal.isLoading()
  #   allowOutsideClick: -> !swal.isLoading()
  # ).then(Movements.processClientResult)

$(document).on 'change keyup', '.movement-amount-field', (e) ->
  fieldAmount = parseFloat($(e.currentTarget).val() || Movements.currentClient.amount)
  clientAmount = parseFloat(Movements.currentClient.amount)

  if Movements.currentMovementKind == 'credit'
    newAmount = clientAmount + fieldAmount
  else
    newAmount = clientAmount - fieldAmount

  if newAmount > 0
    text = '<%= I18n.t(:credit, scope: [:view, :movements, :future_amount]) %>'
  else
    text = '<%= I18n.t(:debit, scope: [:view, :movements, :future_amount]) %>'

  $('.future-amount').html( text + String( Math.abs(newAmount.toFixed(2)) ) )


